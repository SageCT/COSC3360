server.cpp does the following:

1. Reads the input data from standard input
(The moodle server sends the input through cin rather than giving a file name 
like last time, so you'll either use cin >> or getline, whatever you prefer)

2. Create the huffman tree like you did in pa1 and print the symbol info.
You don't have to worry about the compressed file yet, thats for the client
file.

3. It will then wait for requests from the client, I will explain more in a bit.
But each request will be ran in a child thread using fork();

client.cpp does the following:

1. Receives the compressed file through standard input.

2. Creates a socket to work with the server.

3. Sends the binary codes through pthreads to the server and receives the
translated character.

4. Outputs the decoded message.


The strat I used for this was to split my pa1 between the two files
everything I used for the huffman tree I pasted into server.cpp and the other
functions into client.cpp.

My mains looked like this:

server.cpp:

(This section was taken from the example he gave us, so ill just paste it)

    int sockfd, newsockfd, portno, clilen; // Program taken from in-class example
    struct sockaddr_in serv_addr, cli_addr;
    int n;

    if (argc < 2) {
        fprintf(stderr,"ERROR, no port provided\n");
        exit(1);
    }
    sockfd = socket(AF_INET, SOCK_STREAM, 0); 
    if (sockfd < 0) 
        error("ERROR opening socket");
    bzero((char *) &serv_addr, sizeof(serv_addr));
    portno = atoi(argv[1]);
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY; 
    serv_addr.sin_port = htons(portno);
    if (bind(sockfd, (struct sockaddr *) &serv_addr,
            sizeof(serv_addr)) < 0) 
            error("ERROR on binding"); 
    listen(sockfd,5); 
    clilen = sizeof(cli_addr);  // end of program from in-class

(after that I started my tree creation)

Read in inputs and build buffman tree like in pa1.

create a normal char array to read from socket (i.e char myArray[256]) 
I used 256 as the size as thats what we did in class I believe.

create a char variable to hold the future character to send (char varName;)

You're going to want something to make sure you don't get zombie processes,
I used a fireman function, but you're welcome to try whatever u want. If u
want my fireman function this is it:

void fireman(int) {
    while(waitpid(-1, NULL, WNOHANG) > 0) {
        //cout << "A child process ended" << endl;
        break;
    }
}

between you and me, i have no clue how it works, but it does :P
I had this function before my main, and I called it after creating the 
array and char. This was the line:

signal(SIGCHLD, fireman);

after this I created a while loop that is meant to run forever 
(moodle will auto stop the server after test cases so it's okay)

I used while(true) {} to make the loop.

inside the loop:

use newsockfd = accept(parameters) to link the server to the to port/socket
check for error
if(fork() == 0) // this will create child thread for when server receives request
	read in from the socket using read() function
	check for error
	perform whatever you need to turn the binary code to the character
	write the character to socket using write()
	close newsockfd
	_exit(0); 
// end of while loop
return 0;



client.cpp

First I read in inputs. I read them using getline bc each line will be sent
to a pthread.

Second I created sockets the same way he showed us in class, except
we won't need any of the bzero or bcopy functions. Specifically youll only need:

the ints and two structs, the argc if, portno and server variable initialization
and these three:

serv_addr.sin_family = AF_INET;                  // set correct protocol
serv_addr.sin_addr.s_addr = INADDR_ANY;
serv_addr.sin_port = htons(portno);              // * Assign portnum to struct, htons will b explained later

This will setup the data needed for the socket.

The next thing is to create your struct and pthreads like in pa1, but your
struct will likely have less stuff in it. You will need to send the serv_addr
so make sure you add that as part of the struct u send to the pthread.

-- IN THE THREADEDFUNCTION --
cast ur struct like normal and extract the binary code from the input line
you sent. 

now the hard part: making the socket.

create a two ints, one will be the socket file descriptor and the other will 
be used to read and write. (sockfd and n in the examples)

create the socket using: sockfd = socket(AF_INET, SOCK_STREAM, 0);
check for errors
use the connect() call in an if statement and check for errors
n = write(parameters)
Here I sent the binary string as a c-string using .c_str()
check for errors (Each error is a unique check, I just ripped em from the example file)
n = read(parameters)
check for errors
close sockfd

last thing in the threadedfunct is to do what u did in pa1 to store the 
character in its right positions.

-- BACK IN MAIN --

run pthread_join like previously to wait for the child threads and output
the original message like we did before in pa1.



